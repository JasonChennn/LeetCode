/*
Runtime 59 ms Beats 55.55%
Memory 162.1 MB Beats 18.72%
*/
class Solution {
public:
    int isPalindrome(string s,int l,int r) {
        while(l >= 0 and r < s.size() and s[l] == s[r]) {
            l--;
            r++;
        }
        return r-l-1;
    }
    string longestPalindrome(string s) {
        int n = s.size();
        int maxLen = 0;
        string ans;
        for(int i=0;i<n;i++) {
            int currLen = 0;
            currLen = max(currLen,isPalindrome(s,i,i));
            currLen = max(currLen,isPalindrome(s,i,i+1));
            if(currLen > maxLen) {
                maxLen = currLen;
                ans = s.substr(i-(maxLen-1)/2,maxLen);
                cout << maxLen;
            }
        }
        return ans;
    }
};
