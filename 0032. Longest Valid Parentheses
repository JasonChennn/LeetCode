/*
Runtime 0 ms Beats 100% 
Memory 7.4 MB Beats 24.7%
*/
class Solution {
public:
    int longestValidParentheses(string s) {
        int n = s.size();
        stack<int> stk;
        for(int i=0;i<n;i++) {
            if(stk.empty()) {
                stk.push(i);
            } else {
                if(s[i] == ')' and s[stk.top()] == '(') {
                    stk.pop();
                } else {
                    stk.push(i);
                }
            }
        }
        int ans = 0;
        if(stk.empty()) {
            return n;
        } else {
            ans = n-stk.top()-1;
        }
        while(!stk.empty()) {
            int Top = stk.top();
            stk.pop();
            if(stk.empty()) {
                ans = max(ans,Top);
            } else {
                ans = max(ans,Top-stk.top()-1);
            }
        }
        return ans;
    }
};
