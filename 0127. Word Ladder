/*
Runtime 139 ms Beats 76.1% 
Memory 13.8 MB Beats 85.42%
*/
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(),wordList.end());
        queue<pair<string,int>> que;
        int n = beginWord.size();
        que.push({beginWord,1});
        dict.erase(beginWord);
        while(!que.empty()) {
            string word = que.front().first;
            int level = que.front().second;
            que.pop();
            if(word == endWord) return level;
            for(int i=0;i<n;i++) {
                char c = word[i];
                for(int j=0;j<26;j++) {
                    if(c == j+'a') continue;
                    word[i] = j+'a';
                    if(dict.count(word)) {
                        que.push({word,level+1});
                        dict.erase(word);
                    }
                }
                word[i] = c;
            }
        }
        return 0;
    }
};
