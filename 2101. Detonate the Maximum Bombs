/*
Runtime: 91 ms, faster than 93.24% of C++ online submissions for Detonate the Maximum Bombs.
Memory Usage: 14.9 MB, less than 68.80% of C++ online submissions for Detonate the Maximum Bombs.
*/
class Solution {
public:
    long long dis(int x1, int y1, int x2, int y2)
    {
        return pow(x2-x1,2) + pow(y2-y1,2);
    }
    void dfs(vector<vector<int>>& adj,vector<bool>& visited,int& count,int node) {
        if(visited[node]) return;
        visited[node] = true;
        count++;
        for(auto child:adj[node]) {
            if(!visited[child]) {
                dfs(adj,visited,count,child);
            }
        }
    }
    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        vector<vector<int>> adj(n);
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                long long r =dis(bombs[i][0],bombs[i][1],bombs[j][0],bombs[j][1]);
                if(r<= pow(bombs[i][2],2)) adj[i].push_back(j);
                if(r<= pow(bombs[j][2],2)) adj[j].push_back(i);
            }
        }
        int ans = INT_MIN;
        vector<bool>visited;
        for(int i=0;i<n;i++) {
            visited = vector(n, false);
            int count = 0;
            dfs(adj,visited,count,i);
            ans = max(ans,count);
        }
        return ans;
    }
};
