/*
Runtime 0 ms Beats 100% 
Memory 7 MB Beats 62.42%
*/
class Solution {
public:
    unordered_map<int,vector<pair<int,int>>> mp;
    void dfs(vector<vector<int>>& board,int i,int j) {
        int m = board.size();
        int n = board[0].size();
        int count = 0;
        if(i-1>=0 and j-1>=0 and board[i-1][j-1] == 1) count++;
        if(i-1>=0 and board[i-1][j] == 1) count++;
        if(i-1>=0 and j+1<n and board[i-1][j+1] == 1) count++;
        if(j-1>=0 and board[i][j-1] == 1) count++;
        if(j+1<n and board[i][j+1] == 1) count++;
        if(i+1<m and j-1>=0 and board[i+1][j-1] == 1) count++;
        if(i+1<m and board[i+1][j] == 1) count++;
        if(i+1<m and j+1<n and board[i+1][j+1] == 1) count++;
        switch(board[i][j]) {
            case 0:
                if(count == 3) mp[0].push_back({i,j});
                break;
            case 1:
                if(count < 2 or count > 3) mp[1].push_back({i,j});
                break;
        }
    }
    void gameOfLife(vector<vector<int>>& board) {
        int m = board.size();
        int n = board[0].size();
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                dfs(board,i,j);
            }
        }
        for(auto i:mp) {
            for(auto j:i.second) {
                board[j.first][j.second] = (i.first==0) ? 1:0;
            }
        }
    }
};
