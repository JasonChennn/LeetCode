/*
Runtime: 15 ms, faster than 99.35% of C++ online submissions for Course Schedule II.
Memory Usage: 14.2 MB, less than 46.00% of C++ online submissions for Course Schedule II.
*/
class Solution {
public:
    vector<int> ans;
    bool hasCycle(vector<vector<int>>& adj,vector<int>& visited,int i) {
        visited[i] = 1;
        for(auto j:adj[i]) {
            if(visited[j] == 0 and hasCycle(adj,visited,j)) {
                return true;
            } else if(visited[j] == 1) {
                return true;
            }
        }
        visited[i] = 2;
        ans.push_back(i);
        return false;
    }
    vector<int> findOrder(int n, vector<vector<int>>& vec) {
        vector<vector<int>> adj(n);
        for(auto pair:vec) {
            adj[pair[0]].push_back(pair[1]);
        }
        vector<int> visited(n,0);
        for(int i=0;i<n;i++) {
            if(visited[i] == 0 and hasCycle(adj,visited,i)) {
                return {};
            }
        }
        //reverse(ans.begin(),ans.end());
        return ans;
    }
};
