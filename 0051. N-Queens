/*
Runtime 4 ms Beats 84.21%
Memory 7.3 MB Beats 66.97%
*/
class Solution {
public:
    vector<vector<string>> ans;
    bool isSafe(vector<string>& board,int row,int col) {
        int n = board.size();
        for(int i=0;i<n;i++) {
            if(board[i][col] == 'Q') {
                return false;
            }
            if(row-i >= 0 and col-i >= 0 and board[row-i][col-i] == 'Q') return false;
            if(row-i >= 0 and col+i < n and board[row-i][col+i] == 'Q') return false;
        }
        return true;
    }
    void backtrack(vector<string>& board,int row) {
        int n = board.size();
        if(row == n) {
            ans.push_back(board);
            return;
        }
        for(int col=0;col<n;col++) {
            if(isSafe(board,row,col)) {
                board[row][col] = 'Q';
                backtrack(board,row+1);
                board[row][col] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n,string(n,'.'));
        backtrack(board,0);
        return ans;
    }
};
