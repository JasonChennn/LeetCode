/*
Runtime 410 ms Beats 83.57% 
Memory 136.5 MB Beats 33.36%
*/
class Solution {
public:
    int maxStarSum(vector<int>& vals, vector<vector<int>>& edges, int k) {
        int n = vals.size();
        int maxSum = INT_MIN;
        vector<vector<pair<int,int>>> adj(n);
        for(auto pair:edges) {
            adj[pair[0]].push_back({vals[pair[1]],pair[1]});
            adj[pair[1]].push_back({vals[pair[0]],pair[0]});
        }
        for(int i=0;i<n;i++) {
            sort(adj[i].begin(),adj[i].end());
            int sz = adj[i].size();
            int sum = vals[i];
            for(int j=sz-1;j>=0 and sz-j<=k;j--) {
                if(adj[i][j].first < 0) break;
                sum += adj[i][j].first;
            }
            maxSum = max(maxSum,sum);
        }
        return maxSum;
    }
};
