/*
Runtime 3 ms Beats 94.5% 
Memory 6.8 MB Beats 71.19%
*/
class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.size();
        int n = p.size();
        vector<vector<bool>> dp(m+1,vector(n+1,false));
        for(int i=0;i<=m;i++) {
            for(int j=0;j<=n;j++) {
                if(i==0 and j==0) dp[i][j] = 1;
                else if(j == 0) dp[i][j] = 0;
                else if(i == 0) {
                    dp[i][j] = p[j-1] == '*' ? dp[i][j-2] : 0;
                } else {
                    if(p[j-1] == '*') {
                        // 若目前的pattern有*，則可驗pattern上一字是否與當前的string一樣。
                        dp[i][j] = dp[i][j-2] or (dp[i-1][j] and (s[i-1] == p[j-2] or p[j-2] == '.'));
                    } else {
                        // 承上一字所帶的結果，來驗證當前的s是否與p相同，若沒有，則看pattern是否為.。
                        dp[i][j] = dp[i-1][j-1] and (s[i-1] == p[j-1] or p[j-1] == '.');
                    }
                }
            }
        }
        return dp[m][n];
    }
};
