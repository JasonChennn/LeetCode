/*
Runtime 242 ms Beats 96.94% 
Memory 92 MB Beats 48.82%
*/
class Solution {
public:
    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {
        long long ans = 0;
        int n = nums1.size();
        vector<pair<int,int>> vec;
        priority_queue<int,vector<int>,greater<int>> pq;
        for(int i=0;i<n;i++) {
            vec.push_back({nums2[i],nums1[i]});
        }
        sort(vec.begin(),vec.end());
        long long sum = 0;
        for(int i=n-1;i>=0;i--) {
            sum += vec[i].second;
            pq.push(vec[i].second);
            if(pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            if(pq.size() == k) {
                ans = max(ans,sum*vec[i].first);
            }
        }
        return ans;
    }
};
