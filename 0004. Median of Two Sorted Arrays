/*
Runtime 36 ms Beats 92.86% 
Memory 89.2 MB Beats 89.93%
*/
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums2.size() < nums1.size())
            return findMedianSortedArrays(nums2, nums1);
        int n1 = nums1.size();
        int n2 = nums2.size();
        int low = 0, high = n1;
        while(low <= high) {
            int cut1 = (low + high)/2;
            int cut2 = (n1 + n2 + 1)/2 - cut1;
            int l1 = cut1 == 0 ? INT_MIN : nums1[cut1-1];
            int l2 = cut2 == 0 ? INT_MIN : nums2[cut2-1];
            int r1 = cut1 == n1 ? INT_MAX : nums1[cut1];
            int r2 = cut2 == n2 ? INT_MAX : nums2[cut2];
            /*cout << "cut1" << ":" << cut1 << endl;
            cout << "cut2" << ":" << cut2 << endl;
            cout << "l1" << ":" << l1 << endl;
            cout << "l2" << ":" << l2 << endl;
            cout << "r1" << ":" << r1 << endl;
            cout << "r2" << ":" << r2 << endl;*/
            if(l1 <= r2 && l2 <= r1) { 
                // 當nums1的最大>=nums2的最小 以及 nums2的最大>=nums1的最小
                if((n1 + n2)%2 == 0)
                    return (max(l1, l2) + min(r1, r2))/2.0;
                else 
                    return max(l1, l2);
            }
            else if(l1 > r2) {
                // 指nums1的所有數字皆>nums2
                high = cut1 - 1;
            }
            else 
                // 指nums2的所有數字皆>nums1
                low = cut1 + 1;
        }
        return 0;
    }
};
