/*
Runtime 306 ms Beats 53.16%
Memory 16.7 MB Beats 33.97%
*/
class Solution {
public:
    void dfs (vector<vector<int>>& adj,vector<int>& visited,int i) {
        if(visited[i] == 1) return;
        visited[i] = 1;
        for(auto &child: adj[i]) {
            dfs(adj,visited,child);
        }
    }
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        vector<vector<int>> adj(n);
        vector<int> visited(n,0);
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                if(stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int count = 0;
        for(int i=0;i<n;i++) {
            if(!visited[i]) {
                dfs(adj,visited,i);
                count++;
            }
        }
        return n-count;
    }
};
