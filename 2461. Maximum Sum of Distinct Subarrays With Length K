/*
Runtime 278 ms Beats 80.74% 
Memory 90 MB Beats 66.16%
*/
class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        long long sum = 0;
        long long maxSum = 0;
        for(int i=0;i<k;i++) {
            sum += nums[i];
            mp[nums[i]]++;
        }
        if(mp.size() == k) maxSum = sum;
        for(int l=0,r=k;r<nums.size();r++) {
            sum += nums[r];
            sum -= nums[l];
            mp[nums[l]]--;
            mp[nums[r]]++;
            if(mp[nums[l]] == 0) {
                mp.erase(nums[l]);
            }
            if(mp.size() == k) {
                maxSum = max(maxSum,sum);
            }
            l++;
        }
        return maxSum;
    }
};
