/*
Runtime 278 ms Beats 80.74% 
Memory 90 MB Beats 66.16%
*/
class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int,int> mp;
        long long ans = 0;
        long long sum = 0;
        for(int i=0;i<k;i++) {
            mp[nums[i]]++;
            sum += nums[i];
        }
        if(mp.size() == k) ans = sum;
        for(int i=k;i<n;i++) {
            mp[nums[i-k]]--;
            mp[nums[i]]++;
            if(mp[nums[i-k]] == 0) {
                mp.erase(nums[i-k]);
            }
            sum -= nums[i-k];
            sum += nums[i];
            if(mp.size() == k) {
                ans = max(ans,sum);
            }
        }
        return ans;
    }
};
