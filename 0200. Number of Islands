/*
Runtime 27 ms Beats 99.78%
Memory 12.4 MB Beats 63.27%
*/
class Solution {
public:
    void dfs(vector<vector<char>>& grid,int i,int j) {
        int m = grid.size();
        int n = grid[0].size();
        if(i<0 or j<0 or i>=m or j>=n or grid[i][j] != '1') return;
        grid[i][j] = '2';
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
        grid[i][j] = '0';
    }
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int cnt = 0;
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j] == '1') {
                    dfs(grid,i,j);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
