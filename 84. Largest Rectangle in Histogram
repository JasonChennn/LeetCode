/*
Runtime 164 ms Beats 97.96% 
Memory 75.4 MB Beats 86.39%
*/
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        heights.push_back(0);
        int n = heights.size();
        stack<int> stk; // to save index of points.
        int maxArea = 0;
        for(int i=0;i<n;i++) {
            if(stk.empty() or heights[i] > heights[stk.top()]) {
                stk.push(i);
            } else {
                int top = stk.top(); // the current highest point.
                stk.pop();
                if(stk.empty()) {
                    maxArea = max(maxArea,heights[top]*i);
                } else {
                    maxArea = max(maxArea,heights[top]*(i-1-stk.top())); // in this, -1 means the previous's index.
                }
                i--;
            }
        }
        return maxArea;
    }
};
